{"mappings":"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","sources":["src/index.ts","src/core/middlewares/auth/verifyToken.ts","src/modules/auth/auth-repository.ts","src/core/config/env/index.ts","src/core/helpers/error.ts","src/core/helpers/response.ts","src/modules/auth/auth-module.ts","src/modules/auth/auth-router.ts","src/modules/auth/auth-controller.ts","src/modules/auth/auth-service.ts","src/core/providers/nodemailer.ts","src/core/helpers/_globals.ts"],"sourcesContent":["'use strict'\r\nimport fs from 'fs'\r\nimport express, { Application, Router } from 'express'\r\nimport { Module } from './modules/module-interface'\r\nimport cors from 'cors'\r\nimport { verifyToken } from './core/middlewares/auth/verifyToken'\r\nimport { Config } from './core/config/env'\r\nimport AuthModule from './modules/auth/auth-module'\r\nimport morgan from 'morgan'\r\nimport path from 'path'\r\n\r\nexport type {\r\n  SearchDatabase,\r\n  SearchGetPayload,\r\n  SearchPayload,\r\n} from './core/interfaces/global-interface'\r\nexport { onSuccess, onError } from './core/helpers/response'\r\nexport { Global } from './core/helpers/_globals'\r\nexport { sendEmail } from './core/providers/nodemailer'\r\nexport * from './core/helpers/error'\r\nexport { verifyToken } from './core/middlewares/auth/verifyToken'\r\nexport interface Bootstrap {\r\n  modules: Array<Module>\r\n  context: string\r\n  version: string\r\n}\r\nexport class PullupModules implements Bootstrap {\r\n  public modules: Array<Module> = [new AuthModule('auth')]\r\n  public context: string\r\n  public version: string\r\n  private _env: Config\r\n\r\n  constructor(modules: Array<Module>) {\r\n    this._env = Config.instance\r\n    this.modules = this.modules.concat(modules)\r\n    this.context = this._env.config.apiContext || 'api'\r\n    this.version = this._env.config.apiVersion || 'v1'\r\n  }\r\n\r\n  public bootstrap() {\r\n    const router: Router = Router()\r\n    const app: Application = express()\r\n\r\n    app.disable('x-powered-by')\r\n    app.use(morgan('dev'))\r\n    app.use(\r\n      cors({\r\n        allowedHeaders: [\r\n          'Origin',\r\n          'X-Requested-With',\r\n          'Content-Type',\r\n          'queue-token',\r\n          'Accept',\r\n          'X-Access-Token',\r\n          'Authorization',\r\n        ],\r\n        credentials: true,\r\n        methods: 'GET,HEAD,OPTIONS,PUT,PATCH,POST,DELETE',\r\n        origin: '*',\r\n        preflightContinue: false,\r\n      })\r\n    )\r\n    app.use(express.json({ limit: '300mb' }))\r\n    app.use(express.urlencoded({ extended: true }))\r\n\r\n    const moduleOcurrencies = this.modules.filter(\r\n      (module) => module.moduleName === 'auth'\r\n    )\r\n    if (moduleOcurrencies.length > 1) this.modules.shift()\r\n\r\n    this.modules.forEach((module) => {\r\n      router.use(\r\n        `/${this.context}/${this.version}/${module.moduleName}`,\r\n        -!module.isPublic ? verifyToken : (_, __, next) => next(),\r\n        module.router.router\r\n      )\r\n    })\r\n    app.use(router)\r\n\r\n    app\r\n      .listen(process.env.PORT || this._env.config.serverPort, () => {\r\n        console.log(\r\n          `Server up and running on port: ${this._env.config.serverPort} `\r\n        )\r\n      })\r\n      .on('error', (error) => console.error(`Error: ${error}`))\r\n\r\n    return app\r\n  }\r\n}\r\n\r\nexport class StartModules {\r\n  modules: Array<string>\r\n  folderName: string = 'unknow'\r\n  constructor(modules: Array<string>, folderName: string = 'unknowContext') {\r\n    this.folderName = folderName\r\n    this.modules = modules\r\n  }\r\n\r\n  async createModules(srcDirName: string) {\r\n    const moduleFiles: string[] = []\r\n    let files: any\r\n    if (!fs.existsSync(`${srcDirName}/modules`)) {\r\n      fs.mkdirSync(`${srcDirName}/modules`, { recursive: true })\r\n    }\r\n\r\n    files = fs.readdirSync(`${srcDirName}/modules`)\r\n\r\n    this.modules.forEach((module) => {\r\n      let isOk = true\r\n      for (const file in files) {\r\n        if (file === module) {\r\n          isOk = false\r\n        }\r\n      }\r\n      if (isOk) {\r\n        moduleFiles.push(module)\r\n      }\r\n    })\r\n\r\n    moduleFiles.forEach((moduleFile) => {\r\n      let modelName = moduleFile.charAt(0).toUpperCase() + moduleFile.slice(1)\r\n      if (!fs.existsSync(path.resolve(srcDirName, 'modules', moduleFile))) {\r\n        fs.mkdir(\r\n          `${srcDirName}/modules/${moduleFile}`,\r\n          { recursive: true },\r\n          (err) => {\r\n            if (err) console.error(err)\r\n          }\r\n        )\r\n\r\n        if (\r\n          fs.existsSync(\r\n            srcDirName +\r\n              '/node_modules/@pablo-dav/modular-api/samples/controller-sample.txt'\r\n          )\r\n        ) {\r\n          let controller = fs.readFileSync(\r\n            srcDirName +\r\n              '/node_modules/@pablo-dav/modular-api/samples/controller-sample.txt'\r\n          )\r\n          const controllerCode = Buffer.from(controller)\r\n            .toString()\r\n            .replace(/{{MODULE_NAME}}/g, moduleFile)\r\n            .replace(/{{MODEL_NAME}}/g, modelName)\r\n          fs.writeFile(\r\n            `${srcDirName}/modules/${moduleFile}/${moduleFile}-controller.ts`,\r\n            controllerCode,\r\n            (err) => {\r\n              if (err) console.error(err)\r\n              else {\r\n                console.info(\r\n                  `${modelName} Controller File written successfully`\r\n                )\r\n              }\r\n            }\r\n          )\r\n        } else {\r\n          console.info('Controller File not written')\r\n        }\r\n\r\n        if (\r\n          fs.existsSync(\r\n            srcDirName +\r\n              '/node_modules/@pablo-dav/modular-api/samples/router-sample.txt'\r\n          )\r\n        ) {\r\n          let controller = fs.readFileSync(\r\n            srcDirName +\r\n              '/node_modules/@pablo-dav/modular-api/samples/router-sample.txt'\r\n          )\r\n          const controllerCode = Buffer.from(controller)\r\n            .toString()\r\n            .replace(/{{MODULE_NAME}}/g, moduleFile)\r\n            .replace(/{{MODEL_NAME}}/g, modelName)\r\n          fs.writeFile(\r\n            `${srcDirName}/modules/${moduleFile}/${moduleFile}-router.ts`,\r\n            controllerCode,\r\n            (err) => {\r\n              if (err) console.error(err)\r\n              else {\r\n                console.info(`${modelName} Router File written successfully`)\r\n              }\r\n            }\r\n          )\r\n        } else {\r\n          console.info('Router File not written')\r\n        }\r\n\r\n        if (\r\n          fs.existsSync(\r\n            srcDirName +\r\n              '/node_modules/@pablo-dav/modular-api/samples/service-sample.txt'\r\n          )\r\n        ) {\r\n          let controller = fs.readFileSync(\r\n            srcDirName +\r\n              '/node_modules/@pablo-dav/modular-api/samples/service-sample.txt'\r\n          )\r\n          const controllerCode = Buffer.from(controller)\r\n            .toString()\r\n            .replace(/{{MODULE_NAME}}/g, moduleFile)\r\n            .replace(/{{MODEL_NAME}}/g, modelName)\r\n          fs.writeFile(\r\n            `${srcDirName}/modules/${moduleFile}/${moduleFile}-service.ts`,\r\n            controllerCode,\r\n            (err) => {\r\n              if (err) console.error(err)\r\n              else {\r\n                console.info(`${modelName} Service File written successfully`)\r\n              }\r\n            }\r\n          )\r\n        } else {\r\n          console.info('Service File not written')\r\n        }\r\n\r\n        if (\r\n          fs.existsSync(\r\n            srcDirName +\r\n              '/node_modules/@pablo-dav/modular-api/samples/repository-sample.txt'\r\n          )\r\n        ) {\r\n          let controller = fs.readFileSync(\r\n            srcDirName +\r\n              '/node_modules/@pablo-dav/modular-api/samples/repository-sample.txt'\r\n          )\r\n          const controllerCode = Buffer.from(controller)\r\n            .toString()\r\n            .replace(/{{MODULE_NAME}}/g, moduleFile)\r\n            .replace(/{{MODEL_NAME}}/g, modelName)\r\n          fs.writeFile(\r\n            `${srcDirName}/modules/${moduleFile}/${moduleFile}-repository.ts`,\r\n            controllerCode,\r\n            (err) => {\r\n              if (err) console.error(err)\r\n              else {\r\n                console.info(\r\n                  `${modelName} Repository File written successfully`\r\n                )\r\n              }\r\n            }\r\n          )\r\n        } else {\r\n          console.info('Repository File not written')\r\n        }\r\n\r\n        if (\r\n          fs.existsSync(\r\n            srcDirName +\r\n              '/node_modules/@pablo-dav/modular-api/samples/module-sample.txt'\r\n          )\r\n        ) {\r\n          let controller = fs.readFileSync(\r\n            srcDirName +\r\n              '/node_modules/@pablo-dav/modular-api/samples/module-sample.txt'\r\n          )\r\n          const controllerCode = Buffer.from(controller)\r\n            .toString()\r\n            .replace(/{{MODULE_NAME}}/g, moduleFile)\r\n            .replace(/{{MODEL_NAME}}/g, modelName)\r\n          fs.writeFile(\r\n            `${srcDirName}/modules/${moduleFile}/${moduleFile}-module.ts`,\r\n            controllerCode,\r\n            (err) => {\r\n              if (err) console.error(err)\r\n              else {\r\n                console.info(`${modelName} Module File written successfully`)\r\n              }\r\n            }\r\n          )\r\n        } else {\r\n          console.info('Module File not written')\r\n        }\r\n\r\n        if (\r\n          fs.existsSync(\r\n            srcDirName +\r\n              '/node_modules/@pablo-dav/modular-api/samples/interfaces-sample.txt'\r\n          )\r\n        ) {\r\n          let controller = fs.readFileSync(\r\n            srcDirName +\r\n              '/node_modules/@pablo-dav/modular-api/samples/interfaces-sample.txt'\r\n          )\r\n          const controllerCode = Buffer.from(controller)\r\n            .toString()\r\n            .replace(/{{MODULE_NAME}}/g, moduleFile)\r\n            .replace(/{{MODEL_NAME}}/g, modelName)\r\n          fs.writeFile(\r\n            `${srcDirName}/modules/${moduleFile}/${moduleFile}-interfaces.ts`,\r\n            controllerCode,\r\n            (err) => {\r\n              if (err) console.error(err)\r\n              else {\r\n                console.info(\r\n                  `${modelName} Interfaces File written successfully`\r\n                )\r\n                console.info(\r\n                  '\\n-----------------------------------------------------------------\\n'\r\n                )\r\n              }\r\n            }\r\n          )\r\n        } else {\r\n          console.info('Interfaces File not written')\r\n          console.info(\r\n            '\\n-----------------------------------------------------------------\\n'\r\n          )\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  removeModule(srcDirName: string, name: string) {\r\n    if (fs.existsSync(`${srcDirName}/modules/${name}`)) {\r\n      fs.rmdir(\r\n        `${srcDirName}/modules/${name}`,\r\n        { recursive: true },\r\n        (error) => {\r\n          if (error) {\r\n            console.error(error)\r\n          } else {\r\n            console.log('Folder Deleted!')\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }\r\n}\r\n","import { PrismaClient } from '@prisma/client'\r\nimport { NextFunction, Response } from 'express'\r\nimport jwt, { JwtPayload } from 'jsonwebtoken'\r\nimport AuthRepository from '../../../modules/auth/auth-repository'\r\nimport { Config } from '../../config/env'\r\nimport { AuthenticationError } from '../../helpers/error'\r\nimport { onError } from '../../helpers/response'\r\n\r\nconst env = Config.instance\r\nconst userRepository: AuthRepository = new AuthRepository(new PrismaClient())\r\n\r\nexport interface Token extends JwtPayload {\r\n  payload: string\r\n}\r\n\r\nexport async function verifyToken(\r\n  request: any,\r\n  response: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const token = request.headers.authorization?.replace('Bearer ', '')\r\n    const decodedToken: any = jwt.verify(token, `${env.config.jwtSecret}`)\r\n    const dbUser = await userRepository.findByEmail(`${decodedToken.payload}`)\r\n\r\n    if (!dbUser) throw new AuthenticationError('Usuário inválido!')\r\n\r\n    request.user = dbUser\r\n\r\n    next()\r\n  } catch (error: any) {\r\n    return onError(response, error)\r\n  }\r\n}\r\n","import { PrismaClient, User } from '@prisma/client'\r\n\r\nexport default class AuthRepository {\r\n  constructor(private readonly client: PrismaClient) {}\r\n\r\n  public async findByEmail(email: string): Promise<User | null> {\r\n    const user = await this.client.user.findFirst({\r\n      where: { email },\r\n      // @ts-ignore\r\n      include: {\r\n        role: true,\r\n      },\r\n    })\r\n    return user\r\n  }\r\n\r\n  public async findByConfirmationCode(\r\n    confirmationCode: string\r\n  ): Promise<User | null> {\r\n    const user = await this.client.user.findFirst({\r\n      // @ts-ignore\r\n      where: { confirmationCode },\r\n    })\r\n    return user\r\n  }\r\n\r\n  public async saveConfirmationCode(\r\n    id: number,\r\n    confirmationCode: string | null\r\n  ): Promise<User> {\r\n    const user = await this.client.user.update({\r\n      where: { id },\r\n      // @ts-ignore\r\n      data: { confirmationCode },\r\n    })\r\n\r\n    return user\r\n  }\r\n\r\n  public async updatePassword(id: number, password: string): Promise<User> {\r\n    const user = await this.client.user.update({\r\n      where: { id },\r\n      data: { password },\r\n    })\r\n\r\n    return user\r\n  }\r\n\r\n  public async store(data: any): Promise<User> {\r\n    const user = await this.client.user.create({\r\n      data,\r\n    })\r\n\r\n    return user\r\n  }\r\n}\r\n","import fs from 'fs'\r\nimport path from 'path'\r\nexport interface BaseConfig {\r\n  apiContext: string\r\n  apiVersion: string\r\n  serverPort: number\r\n  smtpHost: string\r\n  smtpPort: number\r\n  smtpSecure: boolean\r\n  smtpPass: string\r\n  smtpUser: string\r\n  mailFrom: string\r\n  frontURL: string\r\n  jwtSecret: string\r\n}\r\nexport class Config {\r\n  private readonly _config: BaseConfig\r\n  private static _instance: Config\r\n\r\n  public static get instance() {\r\n    if (!Config._instance) {\r\n      Config._instance = new Config()\r\n    }\r\n\r\n    return Config._instance\r\n  }\r\n\r\n  public get config() {\r\n    return this._config\r\n  }\r\n\r\n  private constructor() {\r\n    this._config = this.readConfigFile()\r\n  }\r\n\r\n  private readConfigFile() {\r\n    let config = null\r\n\r\n    if (process.cwd().includes('dist')) {\r\n      config = fs.readFileSync(path.resolve('../config.json'))\r\n    } else {\r\n      config = fs.readFileSync(path.resolve('config.json'))\r\n    }\r\n\r\n    return JSON.parse(config.toString())\r\n  }\r\n}\r\n","export interface ResponseError extends Error {\r\n  get status(): number\r\n}\r\n\r\nexport class BadRequestError extends Error implements ResponseError {\r\n  private readonly _status: number\r\n  constructor(message: string) {\r\n    super(message)\r\n    this._status = 400\r\n  }\r\n\r\n  public get status() {\r\n    return this._status\r\n  }\r\n}\r\n\r\nexport class AuthenticationError extends Error implements ResponseError {\r\n  private readonly _status: number\r\n  constructor(message: string) {\r\n    super(message)\r\n    this._status = 401\r\n  }\r\n\r\n  public get status() {\r\n    return this._status\r\n  }\r\n}\r\n\r\nexport class ForbiddenError extends Error implements ResponseError {\r\n  private readonly _status: number\r\n  constructor(message: string) {\r\n    super(message)\r\n    this._status = 403\r\n  }\r\n\r\n  public get status() {\r\n    return this._status\r\n  }\r\n}\r\n\r\nexport class NotFoundError extends Error implements ResponseError {\r\n  private _status: number\r\n\r\n  constructor(message: string) {\r\n    super(message)\r\n    this._status = 404\r\n  }\r\n\r\n  public get status() {\r\n    return this._status\r\n  }\r\n}\r\n\r\nexport class UnprocessableEntityError extends Error implements ResponseError {\r\n  private readonly _status: number\r\n  constructor(message: string) {\r\n    super(message)\r\n    this._status = 422\r\n  }\r\n\r\n  public get status() {\r\n    return this._status\r\n  }\r\n}\r\n","import { Response } from 'express'\r\nimport { ErrorDTO, SuccessDTO } from '../interfaces/response-interface'\r\n\r\nimport { ResponseError } from './error'\r\n\r\nexport function onError(response: Response, error: ResponseError) {\r\n  const errorResponse: ErrorDTO = { response, error }\r\n  console.error(`${errorResponse.error.message}`)\r\n  response\r\n    .status(errorResponse.error.status || 500)\r\n    .json({ success: false, message: errorResponse.error.message })\r\n}\r\n\r\nexport function onSuccess(\r\n  response: Response,\r\n  statusCode: number,\r\n  data: Object\r\n) {\r\n  const successResponse: SuccessDTO = { response, statusCode, data }\r\n  successResponse.response\r\n    .status(successResponse.statusCode)\r\n    .json({ success: true, ...successResponse.data })\r\n}\r\n","import { Module } from '../module-interface'\r\nimport AuthRouter from './auth-router'\r\nimport { PrismaClient } from '@prisma/client'\r\nexport default class AuthModule implements Module {\r\n  public readonly moduleName: string\r\n  public readonly router: AuthRouter\r\n  public isPublic: boolean = true\r\n\r\n  constructor(moduleName: string) {\r\n    this.moduleName = moduleName\r\n\r\n    this.router = new AuthRouter(new PrismaClient())\r\n    this.loadRoutes()\r\n  }\r\n\r\n  private loadRoutes() {\r\n    this.router\r\n      .login()\r\n      .register()\r\n      .forgotPassword()\r\n      .updatePassword()\r\n      .me()\r\n      .resetPassword()\r\n  }\r\n}\r\n","import { PrismaClient } from '@prisma/client'\r\nimport { Request, Response, Router } from 'express'\r\nimport { verifyToken } from '../../core/middlewares/auth/verifyToken'\r\nimport { AppRouter } from '../module-interface'\r\nimport AuthController from './auth-controller'\r\nexport default class AuthRouter implements AppRouter {\r\n  public readonly router: Router = Router()\r\n  private readonly controller: AuthController\r\n\r\n  constructor(public prismaClient: PrismaClient) {\r\n    this.controller = new AuthController(prismaClient)\r\n  }\r\n  public login() {\r\n    this.router.post('/login', (request: Request, response: Response) => {\r\n      this.controller.login(request, response)\r\n    })\r\n    return this\r\n  }\r\n\r\n  public register() {\r\n    this.router.post('/register', (request: Request, response: Response) => {\r\n      this.controller.register(request, response)\r\n    })\r\n    return this\r\n  }\r\n\r\n  public me() {\r\n    this.router.get(\r\n      '/me',\r\n      verifyToken,\r\n      (request: Request, response: Response) => {\r\n        this.controller.me(request, response)\r\n      }\r\n    )\r\n    return this\r\n  }\r\n\r\n  public forgotPassword() {\r\n    this.router.post(\r\n      '/forgot-password',\r\n      (request: Request, response: Response) => {\r\n        this.controller.forgotPassword(request, response)\r\n      }\r\n    )\r\n    return this\r\n  }\r\n\r\n  public updatePassword() {\r\n    this.router.patch(\r\n      '/update-password',\r\n      (request: Request, response: Response) => {\r\n        this.controller.updatePassword(request, response)\r\n      }\r\n    )\r\n    return this\r\n  }\r\n\r\n  public resetPassword() {\r\n    this.router.patch(\r\n      '/reset-password',\r\n      (request: Request, response: Response) => {\r\n        this.controller.resetPassword(request, response)\r\n      }\r\n    )\r\n    return this\r\n  }\r\n}\r\n","import { PrismaClient } from '@prisma/client'\r\nimport { Request, Response } from 'express'\r\nimport { onError, onSuccess } from '../../core/helpers/response'\r\nimport AuthService from './auth-service'\r\n\r\nexport default class AuthController {\r\n  private readonly service: AuthService\r\n\r\n  constructor(public prismaClient: PrismaClient) {\r\n    this.service = new AuthService(prismaClient)\r\n  }\r\n\r\n  public async login(request: Request, response: Response) {\r\n    try {\r\n      const loginResponse = await this.service.login(request.body)\r\n\r\n      return onSuccess(response, 200, loginResponse)\r\n    } catch (error: any) {\r\n      return onError(response, error)\r\n    }\r\n  }\r\n\r\n  public async register(request: Request, response: Response) {\r\n    try {\r\n      const user = await this.service.register(request.body)\r\n\r\n      return onSuccess(response, 201, user)\r\n    } catch (error: any) {\r\n      return onError(response, error)\r\n    }\r\n  }\r\n\r\n  public async me(request: any, response: Response) {\r\n    try {\r\n      const user = await this.service.me(request.user)\r\n\r\n      return onSuccess(response, 200, user)\r\n    } catch (error: any) {\r\n      return onError(response, error)\r\n    }\r\n  }\r\n\r\n  public async forgotPassword(request: Request, response: Response) {\r\n    try {\r\n      const message = await this.service.forgotPassword(request.body)\r\n\r\n      return onSuccess(response, 200, { message })\r\n    } catch (error: any) {\r\n      return onError(response, error)\r\n    }\r\n  }\r\n\r\n  public async updatePassword(request: Request, response: Response) {\r\n    try {\r\n      const message = await this.service.updatePassword(request.body)\r\n\r\n      return onSuccess(response, 200, { message })\r\n    } catch (error: any) {\r\n      return onError(response, error)\r\n    }\r\n  }\r\n\r\n  public async resetPassword(request: Request, response: Response) {\r\n    try {\r\n      const message = await this.service.resetPassword(request.body)\r\n\r\n      return onSuccess(response, 200, { message })\r\n    } catch (error: any) {\r\n      return onError(response, error)\r\n    }\r\n  }\r\n}\r\n","// @ts-expect-error\r\nimport { PrismaClient, user } from '@prisma/client'\r\nimport AuthRepository from './auth-repository'\r\nimport bcrypt from 'bcrypt'\r\nimport * as yup from 'yup'\r\nimport jwt from 'jsonwebtoken'\r\nimport fs from 'fs'\r\n\r\nimport { sendEmail } from '../../core/providers/nodemailer'\r\nimport {\r\n  AuthenticationError,\r\n  BadRequestError,\r\n  ForbiddenError,\r\n  NotFoundError,\r\n  UnprocessableEntityError,\r\n} from '../../core/helpers/error'\r\nimport {\r\n  UserLoginPayload,\r\n  UserRegisterPayload,\r\n  UserForgotPasswordPayloadDTO,\r\n  UserResetPasswordPayloadDTO,\r\n} from './auth-interfaces'\r\nimport { Config } from '../../core/config/env'\r\nimport path from 'path'\r\n\r\nconst env = Config.instance\r\nexport default class AuthService {\r\n  private readonly authRepository: AuthRepository\r\n\r\n  constructor(public prismaClient: PrismaClient) {\r\n    this.authRepository = new AuthRepository(prismaClient)\r\n  }\r\n\r\n  private _generateAuthToken(email: string, expiresIn: string = '24h') {\r\n    return jwt.sign({ payload: email }, env.config.jwtSecret, { expiresIn })\r\n  }\r\n\r\n  async login(payload: UserLoginPayload) {\r\n    const userSchema = yup.object({\r\n      email: yup.string().email().required(),\r\n      password: yup.string().min(8).required(),\r\n    })\r\n    const validatedData = await userSchema.validate(payload)\r\n\r\n    const user = await this.authRepository.findByEmail(validatedData.email)\r\n\r\n    if (!user) throw new AuthenticationError('Usuário inválido!')\r\n\r\n    // @ts-expect-error\r\n    if (user && (user.deletedAt || !user.active)) {\r\n      throw new ForbiddenError('Usuário inválido!')\r\n    }\r\n\r\n    const isPasswordValid = await bcrypt.compare(\r\n      validatedData.password,\r\n      user.password\r\n    )\r\n\r\n    if (!isPasswordValid) throw new AuthenticationError('Usuário inválido!')\r\n\r\n    const { password, ...userResponse } = user\r\n\r\n    return {\r\n      token: this._generateAuthToken(user.email),\r\n      user: userResponse,\r\n    }\r\n  }\r\n\r\n  async register(payload: UserRegisterPayload) {\r\n    const userSchema = yup.object({\r\n      name: yup.string().min(3).required(),\r\n      email: yup.string().email().required(),\r\n      password: yup.string().min(8).required(),\r\n      roleId: yup.number().required(),\r\n    })\r\n    const validatedData = await userSchema.validate(payload)\r\n\r\n    const isRegistered = await this.authRepository.findByEmail(\r\n      validatedData.email\r\n    )\r\n\r\n    if (isRegistered) throw new AuthenticationError('Usuário inválido!')\r\n\r\n    const salt = await bcrypt.genSalt()\r\n    const hashPassword = await bcrypt.hash(validatedData.password, salt)\r\n\r\n    const data = {\r\n      name: validatedData.name,\r\n      email: validatedData.email,\r\n      password: hashPassword,\r\n      roleId: validatedData.roleId,\r\n    }\r\n    validatedData.password = hashPassword\r\n    payload.password = hashPassword\r\n\r\n    const { password, ...userResponse } = await this.authRepository.store({\r\n      ...data,\r\n      ...payload,\r\n    })\r\n    return { user: userResponse }\r\n  }\r\n\r\n  async forgotPassword(email: string) {\r\n    const userSchema = yup.object({\r\n      email: yup.string().email().required(),\r\n    })\r\n    const validatedData = await userSchema.validate(email)\r\n\r\n    const user = await this.authRepository.findByEmail(validatedData.email)\r\n\r\n    if (!user) throw new AuthenticationError('Usuário inválido!')\r\n\r\n    const template = fs.readFileSync(\r\n      path.resolve(__dirname, '../../templates/forgot-password.html')\r\n    )\r\n\r\n    const token = this._generateAuthToken(user.email, '1h')\r\n\r\n    const success = this.authRepository.saveConfirmationCode(user.id, token)\r\n\r\n    if (!success)\r\n      throw new UnprocessableEntityError('Erro ao processar solicitação')\r\n\r\n    let emailBody = template\r\n      .toString()\r\n      .replace('{{FRONT_URL}}', env.config.frontURL)\r\n      .replace('{{TOKEN}}', `${token}`)\r\n      .replace('{{NAME}}', `${user.name}`)\r\n      .replace('{{EMAIL}}', `${validatedData.email}`)\r\n\r\n    const message = await sendEmail(\r\n      user.email,\r\n      'Esqueci Minha Senha',\r\n      emailBody\r\n    )\r\n\r\n    return message\r\n  }\r\n\r\n  async me(requestUser: user) {\r\n    const dbUser = await this.authRepository.findByEmail(requestUser.email)\r\n\r\n    if (!dbUser) throw new NotFoundError('Usuário não encontrado!')\r\n\r\n    // @ts-ignore\r\n    const { password, confirmationCode, ...userResponse } = dbUser\r\n    return { user: userResponse }\r\n  }\r\n\r\n  async updatePassword(payload: UserForgotPasswordPayloadDTO) {\r\n    const userSchema = yup.object({\r\n      newPassword: yup.string().min(8).required(),\r\n      newPasswordConfirmation: yup.string().min(8).required(),\r\n      confirmationCode: yup.string().required(),\r\n    })\r\n\r\n    const validatedData = await userSchema.validate(payload)\r\n\r\n    if (validatedData.newPassword !== validatedData.newPasswordConfirmation)\r\n      throw new BadRequestError('Senha inválida!')\r\n\r\n    const decodedToken = jwt.verify(\r\n      validatedData.confirmationCode,\r\n      env.config.jwtSecret\r\n    )\r\n    const user = await this.authRepository.findByConfirmationCode(\r\n      validatedData.confirmationCode\r\n    )\r\n\r\n    if (!decodedToken || !user) throw new BadRequestError('Código inválido!')\r\n\r\n    await this.authRepository.saveConfirmationCode(user.id, null)\r\n\r\n    const salt = await bcrypt.genSalt()\r\n    const hashPassword = await bcrypt.hash(validatedData.newPassword, salt)\r\n\r\n    const isPassSaved = await this.authRepository.updatePassword(\r\n      user.id,\r\n      hashPassword\r\n    )\r\n\r\n    if (!isPassSaved) throw new UnprocessableEntityError('Senha Inválida!')\r\n\r\n    return `Senha atualizada com sucesso!`\r\n  }\r\n\r\n  async resetPassword(payload: UserResetPasswordPayloadDTO) {\r\n    const userSchema = yup.object({\r\n      newPassword: yup.string().min(8).required(),\r\n      email: yup.string().required(),\r\n    })\r\n\r\n    const validatedData = await userSchema.validate(payload)\r\n\r\n    const user = await this.authRepository.findByEmail(validatedData.email)\r\n\r\n    if (!user) throw new BadRequestError('Usuário inválido!')\r\n\r\n    const salt = await bcrypt.genSalt()\r\n    const hashPassword = await bcrypt.hash(validatedData.newPassword, salt)\r\n\r\n    const isPassSaved = await this.authRepository.updatePassword(\r\n      user.id,\r\n      hashPassword\r\n    )\r\n\r\n    if (!isPassSaved) throw new UnprocessableEntityError('Senha Inválida!')\r\n\r\n    return `Senha atualizada com sucesso!`\r\n  }\r\n}\r\n","'use strict'\r\nimport nodemailer from 'nodemailer'\r\nimport { Config } from '../config/env'\r\n\r\nconst env = Config.instance\r\n\r\nconst transport = nodemailer.createTransport({\r\n  host: env.config.smtpHost,\r\n  port: env.config.smtpPort,\r\n  secure: env.config.smtpSecure,\r\n  auth: {\r\n    user: env.config.smtpUser,\r\n    pass: env.config.smtpPass,\r\n  },\r\n  tls: {\r\n    ciphers: 'SSLv3',\r\n  },\r\n})\r\n\r\nexport async function sendEmail(\r\n  emailTo: string,\r\n  subject: string,\r\n  html: string\r\n) {\r\n  try {\r\n    const info = await transport.sendMail({\r\n      from: env.config.mailFrom,\r\n      to: emailTo,\r\n      subject,\r\n      html,\r\n      //   attachments: [\r\n      //     {\r\n      //       filename: 'report.pdf',\r\n      //       path: options.pdf,\r\n      //       contentType: 'application/pdf',\r\n      //       encoding: 'base64',\r\n      //     },\r\n      //   ],\r\n    })\r\n    return `Mensagem enviada para: ${info.accepted}`\r\n  } catch (error) {\r\n    console.error(error)\r\n    return `Não foi possível enviar a mensagem`\r\n  }\r\n}\r\n","import { SearchDatabase, SearchPayload } from '../interfaces/global-interface'\r\n\r\nexport class Global {\r\n  public includeParamsRelations(query: string | undefined) {\r\n    const relations = query?.split(',')\r\n\r\n    if (!relations || relations.length == 0) return {}\r\n\r\n    let params = {}\r\n\r\n    relations.forEach((relation) => {\r\n      if (relation.includes('.')) {\r\n        const linkedRelations = relation.split('.')\r\n        if (linkedRelations[1].includes('*')) {\r\n          // ! O formato pode vir desta maneira user.city*state\r\n          const nestedRelations = linkedRelations[1].split('*')\r\n          let include = {}\r\n\r\n          nestedRelations.forEach((nestedRelation) => {\r\n            // ! O trecho pode repetir mais de 2 vezes, então com esse foreach ele vai formatar no formato do objeto que o prisma precisa\r\n            // ! Por exemplo: {city: true, state: true}\r\n            include = {\r\n              ...include,\r\n              [nestedRelation]: true,\r\n            }\r\n          })\r\n\r\n          params = {\r\n            ...params,\r\n            [linkedRelations[0]]: {\r\n              include,\r\n            },\r\n          }\r\n        } else {\r\n          params = {\r\n            ...params,\r\n            [linkedRelations[0]]: {\r\n              include: {\r\n                [linkedRelations[1]]: true,\r\n              },\r\n            },\r\n          }\r\n        }\r\n      } else {\r\n        params = { ...params, [relation]: true }\r\n      }\r\n    })\r\n\r\n    return { include: params }\r\n  }\r\n\r\n  public generateFilters(payload: SearchPayload): SearchDatabase {\r\n    let params = {}\r\n    let search = null\r\n\r\n    if (payload.search) {\r\n      let searchKey = {}\r\n      const searchObject = Object.keys(payload.search).map((key) => {\r\n        let searchKeyFormatted: string | undefined = undefined\r\n        if (payload.options?.search === 'equals') {\r\n          search = (payload.search as any)[key]\r\n        } else {\r\n          search = { contains: (payload.search as any)[key] }\r\n        }\r\n\r\n        // ! Verifica se o último caractere é digito para receber multiplos indexes iguais\r\n        if (/^\\d+(?:\\.\\d+)?$/.test(key.charAt(key.length - 1))) {\r\n          searchKeyFormatted = key.slice(0, -1)\r\n        }\r\n\r\n        if (typeof (payload.search as any)[key] !== 'string') {\r\n          if (key.includes('.')) {\r\n            const linkedKeys = key.split('.')\r\n            searchKey = this.generateSearchKey(\r\n              linkedKeys,\r\n              searchKeyFormatted,\r\n              key,\r\n              payload.search,\r\n              payload.options?.search || 'contains'\r\n            )\r\n          } else {\r\n            searchKey = {\r\n              [searchKeyFormatted || key]: (payload.search as any)[key],\r\n            }\r\n          }\r\n        } else {\r\n          if (key.includes('.')) {\r\n            const linkedKeys = key.split('.')\r\n            searchKey = this.generateSearchKey(\r\n              linkedKeys,\r\n              searchKeyFormatted,\r\n              key,\r\n              payload.search,\r\n              payload.options?.search || 'contains'\r\n            )\r\n          } else {\r\n            searchKey = {\r\n              [searchKeyFormatted || key]: search,\r\n            }\r\n          }\r\n        }\r\n\r\n        return searchKey\r\n      })\r\n\r\n      params = { where: { [payload.options?.filter || 'OR']: searchObject } }\r\n    }\r\n\r\n    let orderBy: Array<Object> = []\r\n    if (payload.sort) {\r\n      Object.keys(payload.sort).forEach((sortField) => {\r\n        if (sortField.includes('.')) {\r\n          const linkedSortFields = sortField.split('.')\r\n\r\n          orderBy.push({\r\n            [linkedSortFields[0]]: {\r\n              [linkedSortFields[1]]: (payload.sort as any)[sortField],\r\n            },\r\n          })\r\n        } else {\r\n          orderBy.push({\r\n            [sortField]: (payload.sort as any)[sortField],\r\n          })\r\n        }\r\n      })\r\n    }\r\n\r\n    params = {\r\n      ...params,\r\n      orderBy,\r\n    }\r\n\r\n    if (payload.pagination)\r\n      params = {\r\n        ...params,\r\n        take: payload.pagination.take,\r\n        skip: payload.pagination.take * (payload.pagination.page - 1),\r\n      }\r\n\r\n    return params\r\n  }\r\n\r\n  private generateSearchKey(\r\n    linkedKeys: Array<string>,\r\n    searchKeyFormatted: string | undefined,\r\n    key: string,\r\n    search: Object,\r\n    options: string\r\n  ) {\r\n    let relationToSearch = undefined\r\n\r\n    // ! Search depth on relations\r\n    if (linkedKeys[2]) {\r\n      // ! Options defines if the search is about the exatcly same string or just containing the letter on their string similar to %%\r\n      if (options === 'equals') {\r\n        relationToSearch = {\r\n          [searchKeyFormatted || linkedKeys[2]]: (search as any)[key],\r\n        }\r\n      } else {\r\n        relationToSearch = {\r\n          [searchKeyFormatted || linkedKeys[2]]: {\r\n            contains: (search as any)[key],\r\n          },\r\n        }\r\n      }\r\n    } else {\r\n      // ! Options defines if the search is about the exatcly same string or just containing the letter on their string similar to %%\r\n      if (options === 'equals') {\r\n        relationToSearch = (search as any)[key]\r\n      } else {\r\n        relationToSearch = { contains: (search as any)[key] }\r\n      }\r\n    }\r\n\r\n    return {\r\n      [linkedKeys[0]]: {\r\n        [linkedKeys[1]]: relationToSearch,\r\n      },\r\n    }\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"index.js.map"}